// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5q15U6pj6GWNAXQbRPqL8N
// Component: 5ms9WSSiRNZ1YI
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsjbDgCmIjbjAo } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jb-Dg_CmIjbjAO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_copy_of_e_commerce.module.css"; // plasmic-import: 5q15U6pj6GWNAXQbRPqL8N/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: 5ms9WSSiRNZ1YI/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: _Y9-LmYsjrtMDy/icon
import plant1FeaturedjpgQWqDkr1K0QFzK7 from "./images/plant1Featuredjpg.png"; // plasmic-import: QWqDkr1k0QFzK7/picture
import plant2FeaturedjpgG1YcKeAhjzBfTo from "./images/plant2Featuredjpg.png"; // plasmic-import: g1YcKeAHJZBfTO/picture
import plant5FeaturedjpgRyjq46De8Lo34D from "./images/plant5Featuredjpg.png"; // plasmic-import: Ryjq46de8LO34d/picture
import acquapngGQzv5QLhGlkqEj from "./images/acquapng.png"; // plasmic-import: GQzv5QLhGLKQEj/picture

export const PlasmicProductRow__VariantProps = new Array();

export const PlasmicProductRow__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductRow__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjbDgCmIjbjAo()
  });
  return true ? (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__kXed)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__rdY)}
          displayHeight={"270px /* plasmic-token: 8Aki3wJyIho8Ik */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant1FeaturedjpgQWqDkr1K0QFzK7,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__vzpBg)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__etXpG)}
              role={"img"}
            />
          </div>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__tiGqE)}>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__zXxeV
            )}
          >
            {"piantina grassa"}
          </a>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h5Acr
            )}
          >
            {"PIANTE"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__iFdAc
            )}
          >
            {"$9.40 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column___5YhwG)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__dAEz)}
          displayHeight={"270px /* plasmic-token: 8Aki3wJyIho8Ik */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant2FeaturedjpgG1YcKeAhjzBfTo,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__f9UQe)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg___3H6Qz)}
              role={"img"}
            />
          </div>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__nxadx)}>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__kZ6Pz
            )}
          >
            {"Gelsomino"}
          </a>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x8Rkg
            )}
          >
            {"FIORE"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__wY7Uz
            )}
          >
            {"$3.00 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column___25Pst)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__wnAxs)}
          displayHeight={"270px /* plasmic-token: 8Aki3wJyIho8Ik */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: plant5FeaturedjpgRyjq46De8Lo34D,
            fullWidth: 400,
            fullHeight: 400,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__jkoFo)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__bB2O)}
              role={"img"}
            />
          </div>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__sAjPv)}>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__jjZpj
            )}
          >
            {"Edera"}
          </a>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dxuza
            )}
          >
            {"PIANTA"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__ep7K
            )}
          >
            {"$220.00 "}
          </h5>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__yk8QY)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img___03H1)}
          displayHeight={"270px /* plasmic-token: 8Aki3wJyIho8Ik */"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: acquapngGQzv5QLhGlkqEj,
            fullWidth: 381,
            fullHeight: 1093,
            aspectRatio: undefined
          }}
        />

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___6Mwd2)}>
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__ftHJp)}
              role={"img"}
            />
          </div>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__yOXqx)}>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__sj9Qy
            )}
          >
            {"Acqua"}
          </a>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wrhL
            )}
          >
            {"BIBITA"}
          </div>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__sgDVn
            )}
          >
            {"$1.00 "}
          </h5>
        </div>
      </p.Stack>
    </p.Stack>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
