// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5q15U6pj6GWNAXQbRPqL8N
// Component: 1zesAccCv2cQbr
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsjbDgCmIjbjAo } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jb-Dg_CmIjbjAO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_copy_of_e_commerce.module.css"; // plasmic-import: 5q15U6pj6GWNAXQbRPqL8N/projectcss
import sty from "./PlasmicProfil.module.css"; // plasmic-import: 1zesAccCv2cQbr/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: TDOAy6gLZgM9SS/icon
import image24OegrxPAafn69F from "./images/image2.png"; // plasmic-import: 4oegrxPAafn69F/picture
import image30MaQdLfWxpqoWg from "./images/image3.jpg"; // plasmic-import: 0MAQdLfWxpqoWg/picture

export const PlasmicProfil__VariantProps = new Array();

export const PlasmicProfil__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProfil__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjbDgCmIjbjAo()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tyMfx)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__su5Om)}
            >
              {true ? (
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__hPqaz
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__etGQl)}
                    displayHeight={"50px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"50px"}
                    src={{
                      src: image24OegrxPAafn69F,
                      fullWidth: 750,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                </a>
              ) : null}
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jtrsn)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4PB07
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__hnVt3)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wSBlf
                    )}
                  >
                    {"Listings"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__rKqP)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__kUoC
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__muaYu)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wItFx
                    )}
                  >
                    {"Neighborhoods"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__swqKz)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zlkJt
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__yPgIc)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z2FrT
                    )}
                  >
                    {"Agents"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__xZqU9)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___5T68K
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__pAnR)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9GfhJ
                    )}
                  >
                    {"Contact"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__dq6SP)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__n6AjW
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__xlgLv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kb23P
                    )}
                  >
                    {"Blog"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__ew27M)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ebZa8
                  )}
                  href={"tel:+4733378901"}
                  target={"_blank"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__vR0BZ)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0RuE9
                    )}
                  >
                    {"Call Us"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__ctcsN)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tx0Zt)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lv4Ig)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__jLPg)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ovDOn)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: image30MaQdLfWxpqoWg,
                      fullWidth: 1920,
                      fullHeight: 1275,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__wqhP)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oETh)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Get in touch."}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v80OM
                      )}
                    >
                      {
                        "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient."
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__diix4)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oJxJd
                          )}
                        >
                          <input
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textInput__dlDwo
                            )}
                            placeholder={"First Name"}
                            size={1}
                            type={"text"}
                            value={""}
                          />

                          <input
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textInput__efkG0
                            )}
                            placeholder={"Last Name"}
                            size={1}
                            type={"text"}
                            value={""}
                          />
                        </p.Stack>
                      ) : null}
                      <input
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textInput___9AH8
                        )}
                        placeholder={"Email address"}
                        size={1}
                        type={"text"}
                        value={""}
                      />

                      <input
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textInput__kqEpZ
                        )}
                        placeholder={"Phone number"}
                        size={1}
                        type={"text"}
                        value={""}
                      />

                      <textarea
                        data-plasmic-name={"textarea"}
                        data-plasmic-override={overrides.textarea}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.textarea
                        )}
                        placeholder={"Message"}
                        value={""}
                      />

                      <p.Stack
                        as={"a"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__pFeol
                        )}
                      >
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cIdFa
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qEz8V
                          )}
                        >
                          {"Send"}
                        </div>
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bwJhd
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
          </p.Stack>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__puwkM)}>
              <div className={classNames(projectcss.all, sty.freeBox___7RhGl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5NdWr
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "© Company. All rights reserved. This site proudly built with "
                      }
                    </React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__ywegE
                        )}
                        href={"https://www.plasmic.app"}
                      >
                        {"Plasmic"}
                      </a>
                    }

                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "h2", "textarea"],
  columns: ["columns", "h2", "textarea"],
  h2: ["h2"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProfil__ArgProps,
          internalVariantPropNames: PlasmicProfil__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProfil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfil";
  } else {
    func.displayName = `PlasmicProfil.${nodeName}`;
  }
  return func;
}

export const PlasmicProfil = Object.assign(
  // Top-level PlasmicProfil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicProfil
    internalVariantProps: PlasmicProfil__VariantProps,
    internalArgProps: PlasmicProfil__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfil;
/* prettier-ignore-end */
